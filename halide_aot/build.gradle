apply plugin: "cpp"

def halide_dir = "M:/halide/halide_win64_150218"


task copyHalideLib(type: Copy) {
    //dependsOn build
    logger.quiet("copyHalideLib from ${halide_dir}/Release/Halide.dll to ${buildDir}/exe/halide_generator/")
    from file("${halide_dir}/Release/Halide.dll")
    into file("${buildDir}/exe/halide_aot")
}





model{

    platforms {
        x86 {
            architecture "x86"
        }
        x64 {
            architecture "x64"
        }
    }

    components{

        halide_aot(NativeExecutableSpec) {
            //targetPlatform "x86"
            targetPlatform "x64"
            sources {
                cpp {
                    source {
                        srcDirs "src/","src/hdrplus/", "${halide_dir}/tools/", "${halide_dir}/include/"
                        include "Main.cpp", "align.cpp","merge.cpp","util.cpp","align.h","merge.h"
                        /*exportedHeaders {
                            srcDirs  "${halide_dir}/include"
                        }*/
                    }
                }
            }
            binaries{
                all {
                    cppCompiler.args "-std=c++11", "-g", "-Wall", "-fno-rtti", "/I${halide_dir}/include/"
                    // "/bin" assumes Makefile build for Halide; "/build/lib" assumes CMake build
                    linker.args "-lHalide", "-ldl", "-lpthread", "-lz", "/clr" ,"/MT", "/MACHINE:x86_64", "/SUBSYSTEM:CONSOLE", "${halide_dir}/Release/Halide.lib", "/LIBPATH:${halide_dir}/Release/Halide.dll"
                    logger.quiet("binaries all")
                }
            }

            //hook into clean and delete libs too
            clean{
                delete "$project.projectDir/libs"
                delete "$project.projectDir/stage1_align_merge.a"
                delete "$project.projectDir/stage1_align_merge.h"
            }

            task buildX32 {
                dependsOn build
                doLast {
                    String envVars = "${buildDir}/exe/halide_aot/halide_aot.exe -x 32"
                    ProcessBuilder processBuilder = new ProcessBuilder()
                    processBuilder.command(envVars.split(' '))
                    logger.quiet("Output of running " + envVars + " is: ")
                    Process process = processBuilder.start()
                    process.waitFor()

                    mkdir("${projectDir}/libs/armeabi-v7a")
                }
            }

            task buildX64 {
                dependsOn build
                doLast {
                    String envVars = "${buildDir}/exe/halide_aot/halide_aot.exe -x 64"
                    ProcessBuilder processBuilder = new ProcessBuilder()
                    processBuilder.command(envVars.split(' '))
                    logger.quiet("Output of running " + envVars + " is: ")
                    Process process = processBuilder.start()
                    process.waitFor()

                    mkdir("${projectDir}/libs/arm64-v8a")
                }
            }

            task copyX32(type:Copy){
                dependsOn buildX32
                    logger.quiet("copyX32")
                    from "$projectDir/stage1_align_merge.a","$projectDir/stage1_align_merge.h"
                    into "$projectDir/libs/armeabi-v7a"

            }

            task copyX64(type:Copy){
                dependsOn buildX64
                    logger.quiet("copyX64")
                    from "$projectDir/stage1_align_merge.a","$projectDir/stage1_align_merge.h"
                    into "$projectDir/libs/arm64-v8a"
            }

            //hook into build
            build{
                //the compiler runs after doFirst and calls doLast
                doFirst {
                    logger.quiet("build.doFirst")
                }
                //on windows its needed, if halide is not in the %PATH, to copy the halide.dll to the exe to run the generator
                dependsOn copyHalideLib

                doLast{
                    logger.quiet("build.doLast")
                    buildX32.execute()
                    copyX32.execute()
                    buildX64.execute()
                    copyX64.execute()
                }

            }
        }
    }
}